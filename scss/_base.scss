////================
////VARS
////===============
//colors
$white: #fff;
//$light: #f4f4f4;
$grey-search: #e5e5e5;
$lighter: #666;
$dark: #333645;
$darker: #2d303e;
$btn-hov: #ebebeb;
$service-colors: ( //service card colors
  '1': #67809f,
  '2': #4083d7,
  '3': #2dcc71,
  '4': #d64541,
  '5': #926fb1,
  '6': #f62559,
  '7': #926fb1);

  $color-key:(
    'web': 5,
    'it': 2,
    'telecoms': 4,
    'software': 1,
    'digital': 3,
    'security': 6);

// Layout //not used yet
$max-width: 1000px;
$gutter: 10px;

//breakpoints
$breakpoints: (
  'xs': 575px,
  'sm': 600px,
  'med': 768px,
  'lg': 992px,
  'xlg': 1260px,
);

//===========
//FONTS
//===========
//font weights 700 600 400
@font-face{
  font-family:Poppins;
  font-style:italic;
  font-weight:400;
  font-display:swap;
  src:local("Poppins Italic"),local("Poppins-Italic"),
  url(https://fonts.gstatic.com/s/poppins/v12/pxiGyp8kv8JHgFVrJJLucHtF.ttf) 
  format("truetype")
}
@font-face {
  font-family:Poppins;
  font-style:italic;
  font-weight:600;
  font-display:swap;
  src:local("Poppins SemiBold Italic"),
  local("Poppins-SemiBoldItalic"),
  url(https://fonts.gstatic.com/s/poppins/v12/pxiDyp8kv8JHgFVrJJLmr19VF9eL.ttf) 
  format("truetype")
}
@font-face {
  font-family:Poppins;
  font-style:italic;
  font-weight:700;
  font-display:swap;
  src:local("Poppins Bold Italic"),
  local("Poppins-BoldItalic"),
  url(https://fonts.gstatic.com/s/poppins/v12/pxiDyp8kv8JHgFVrJJLmy15VF9eL.ttf) 
  format("truetype")
}
@font-face {
  font-family:Poppins;
  font-style:normal;
  font-weight:400;
  font-display:swap;
  src:local("Poppins Regular"), 
  local("Poppins-Regular"),
  url(https://fonts.gstatic.com/s/poppins/v12/pxiEyp8kv8JHgFVrJJfedw.ttf)
  format("truetype")
}
@font-face { 
  font-family:Poppins;
  font-style:normal;
  font-weight:600;
  font-display:swap;
  src:local("Poppins SemiBold"),
  local("Poppins-SemiBold"),
  url(https://fonts.gstatic.com/s/poppins/v12/pxiByp8kv8JHgFVrLEj6Z1xlEA.ttf)
  format("truetype")
}
@font-face {
  font-family:Poppins;
  font-style:normal;
  font-weight:700;
  font-display:swap;
  src:local("Poppins Bold"),
  local("Poppins-Bold"),
  url(https://fonts.gstatic.com/s/poppins/v12/pxiByp8kv8JHgFVrLCz7Z1xlEA.ttf)
  format("truetype")
}
//font end

@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
  /* IE10+ CSS */
}

//global
html {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  padding: 0;
}
  
*, *:before, *:after {
  -webkit-box-sizing: inherit;
  -moz-box-sizing: inherit;
  box-sizing: inherit;
}

body {
  font-size: 1rem;
  line-height: 1.5;
  margin: 0;

  font-family: Poppins, sans-serif;
  font-size: 1rem;
  letter-spacing: .4px;
  background-color: darken(#fff, 2%);
}

.clearfix::after {
  content: " ";
  clear: both;
  display: table;
}

//resets
h2 {
  text-transform: uppercase;
  font-weight: 500;
}
a {
  text-decoration: none;
  color: inherit;
  cursor: pointer;
}


//===================
//mixins
//===================
//screensize mediaquery
@mixin mq($break) {
  $value: map-get($breakpoints, $break);
  $sm: map-get($breakpoints, 'sm');
    
  @if $value == null {
    @error "'#{$break}' is not a valid breakpoint name.";   
  }
            
  @if $value < $sm {
    @media only screen and (max-width: $value){
       @content;
    }
   }
  @else {
     @media only screen and (min-width: $value){
       @content;
    }
  }
} 

//global properties for card grid and items
//used by service-cards and news articles
@mixin card-grid () {
    display: grid;
    grid-gap: 2em;
    margin: 5em 0;
    grid-template-columns: 1fr; //sm screen layout

    .card {
        //display: inline-block;
        padding: 30px;
        border: 1px solid rgb(204, 204, 204);
        border-radius: 0.25em;
        text-align: center; 
        color: $dark;
        background-color: $white;

        //for news articles
        .author {
            text-align: left;
            margin-top: 2em;
            padding-top: 2em;
            border-top: 1px solid rgb(204, 204, 204);
        
            .avatar {
                img {
                    width: 3em;
                    height: 3em;
                }

                border-radius: 50%;
                display: inline-block;        
            }
            .details {
                display: inline-block;
                padding-left: 1em;
                strong, p {
                    font-size: 0.9rem;
                    margin:0;
                    padding:0;
                }
                p {
                    //margin: 0 auto 0;
                }
            }
            
        }

    }
}

.wrap {
    margin: 0 1em;

    @include mq(med){
        margin: 0 auto;
        max-width: 750px;

        @include mq(lg) {
            max-width: 970px;

             @include mq(xlg) {
                max-width: 1200px;
            }
        }
    }
    
}



//loop used for styling the service cards
@for $i from 1 through 7 {
  .service-list {
    .card:nth-of-type(#{$i}) {
      //Naming cards for positioning in grid
      @include mq(lg) {
        grid-area: s#{$i};
      }

      //CARD default state
      .service-icon {
        color: $white;
        background-color: map-get($service-colors, #{$i});
      }
      .btn {
        background-color: map-get($service-colors, #{$i});
      }

      //CARD hover state
      &:hover {
        & {
          background-color: map-get($service-colors, #{$i});
        }
        .service-icon,
        .btn {
          color: map-get($service-colors, #{$i});
          background-color: $white;
        }
        h3,
        p {
          color: white;
        }
      }
    }
  }     
}

@mixin print-color() {
  .web {
    i {
      color: get-color(web);
    }
    small {
        &::after {
          display: block;
          content: "Design";
      }
    }
    &:hover {
      background-color: get-color(web);
    }
  }

  .it {
    i {
      color: get-color(it);
    }
    small {
      &::after {
        display: block;
        content: "Support";
      }
    }
    &:hover {
      background-color: get-color(it);
    }
  }

  .telecoms {
    i {
      color: get-color(telecoms);
    }
    small {
      &::after {
        display: block;
        content: "Services";
      }
    }
    &:hover {
      background-color: get-color(telcoms);
    }
  }

  .software {
    i {
      color: get-color(software);
    }
    small {
      &::after {
        display: block;
        content: "Software";
      }
    }
    &:hover {
      background-color: get-color(software);
    }
  }

  .digital {
    i {
      color: get-color(digital);
    }
    small {
      &::after {
        display: block;
        content: "Marketing";
      }
    }
    &:hover {
      background-color: get-color(digital);
    }
  }

  .security {
    i {
      color: get-color(security);
    }
    small {
      &::after {
        display: block;
        content: "Security";
      }
    }
    &:hover {
      background-color: get-color(security);
    }
  }
}

//===============
//FUNCTIONS
//===============

//retrieve color from code
@function get-color($name) {
  $i:  map-get($color-key, $name);
  
  @return map-get($service-colors, #{$i});
}